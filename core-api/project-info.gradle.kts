import org.gradle.api.DefaultTask
import org.gradle.api.provider.Property
import org.gradle.api.file.DirectoryProperty
import org.gradle.api.tasks.Input
import org.gradle.api.tasks.OutputDirectory
import org.gradle.api.tasks.TaskAction

abstract class GenerateProjectInfoTask : DefaultTask() {

    @get:Input abstract val packageName: Property<String>
    @get:Input abstract val javaVersion: Property<String>
    @get:Input abstract val projectGroup: Property<String>
    @get:Input abstract val projectName: Property<String>
    @get:Input abstract val projectVersion: Property<String>
    @get:OutputDirectory abstract val outputDir: DirectoryProperty

    @TaskAction
    fun generate() {
        val packageName = packageName.get()
        val javaVersion = javaVersion.get()
        val groupId = projectGroup.get()
        val artifactId = projectName.get()
        val version = projectVersion.get()

        val packagePath = packageName.replace('.', '/')
        val projectInfoFile = outputDir.file(packagePath + "/ProjectInfo.java").get().asFile
        projectInfoFile.parentFile.mkdirs()
        projectInfoFile.writeText("""
            package ${packageName};

            //
            // This file is automatically generated by the build script.
            // Do not edit it manually.
            //
            
            import javax.lang.model.SourceVersion;

            public final class ProjectInfo {
                public static final SourceVersion JAVA_RELEASE = SourceVersion.RELEASE_${javaVersion};
                public static int javaReleaseNo() { return JAVA_RELEASE.ordinal(); }
                public static String javaReleaseNoString() { return String.valueOf(JAVA_RELEASE.ordinal()); }

                public static final String GROUP_ID = "$groupId";
                public static final String ARTIFACT_ID = "$artifactId";
                public static final String VERSION = "$version";
            }
        """.trimIndent())
    }
}

tasks.register<GenerateProjectInfoTask>("generateProjectInfo") {
    group = "build"
    description = "Generates the ProjectInfo class from project properties."

    packageName.set(rootProject.findProperty("project.info.package") as String? ?: "")
    javaVersion.set(rootProject.findProperty("java.version") as String? ?: "17")
    projectGroup.set(rootProject.group.toString())
    projectName.set(rootProject.name.toString())
    projectVersion.set(rootProject.version.toString())
    val outputPath = project.findProperty("project.info.dir") as String? ?: "generated/sources/project-info/java/main"
    outputDir.set(project.layout.buildDirectory.dir(outputPath))
}

tasks.named<JavaCompile>("compileJava") {
    dependsOn(tasks.named("generateProjectInfo"))
}
tasks.named<JavaCompile>("compileTestJava") {
    dependsOn(tasks.named("generateProjectInfo"))
}
