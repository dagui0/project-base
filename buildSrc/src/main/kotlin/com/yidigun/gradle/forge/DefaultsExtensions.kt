package com.yidigun.gradle.forge

import com.yidigun.gradle.forge.extensions.BuildInfoExtension
import com.yidigun.gradle.forge.extensions.MultipleFilesExtension
import com.yidigun.gradle.forge.extensions.ProjectInfoExtension
import com.yidigun.gradle.forge.extensions.SingleFileExtension
import com.yidigun.gradle.forge.extensions.SourceTemplateExtension
import com.yidigun.gradle.forge.extensions.TemplatedSourcesSet
import com.yidigun.gradle.forge.extensions.TemplateExtension
import com.yidigun.gradle.forge.tasks.BuildInfoTask
import com.yidigun.gradle.forge.tasks.MultipleFilesProperties
import com.yidigun.gradle.forge.tasks.ProjectInfoTask
import com.yidigun.gradle.forge.tasks.SingleFileProperties
import com.yidigun.gradle.forge.tasks.SourceTemplateProperties
import com.yidigun.gradle.forge.tasks.TemplateProperties
import com.yidigun.gradle.forge.tasks.TemplatedSourcesTask
import com.yidigun.gradle.forge.templates.SupportedTemplateLanguage
import org.gradle.api.Project
import org.gradle.api.plugins.JavaPlugin
import org.gradle.api.plugins.JavaPluginExtension
import org.gradle.kotlin.dsl.the

//
// TemplatedSourcesTask
//

/// TemplatedSourcesTask 의 기본값을 설정한다.
/// @param project Gradle Project
fun TemplatedSourcesTask.applyDefaults(project: Project) {
    val config = project.objects.newInstance(TemplatedSourcesSet::class.java, "custom")
    config.applyDefaults(project)
    (this as SourceTemplateProperties).configureFrom(config as SourceTemplateExtension)
    (this as MultipleFilesProperties).configureFrom(config as MultipleFilesExtension)
    setupDerivedProperties(project)
}

/// TemplatedSourcesExtension 의 기본값을 설정한다.
/// @param project Gradle Project
fun TemplatedSourcesSet.applyDefaults(project: Project) {
    (this as SourceTemplateExtension).applyDefaults(project)
    (this as MultipleFilesExtension).applyDefaults(project)
    templateDir.convention(
        project.layout.projectDirectory.dir("src/main/javaTemplate"))
}

//
// ProjectInfoTask
//

/// ProjectInfoTask 의 기본값을 설정한다.
/// @param project Gradle Project
fun ProjectInfoTask.applyDefaults(project: Project) {
    val config = project.objects.newInstance(ProjectInfoExtension::class.java)
    config.applyDefaults(project)
    (this as SourceTemplateProperties).configureFrom(config as SourceTemplateExtension)
    (this as SingleFileProperties).configureFrom(config as SingleFileExtension)
    setupDerivedProperties(project)
}

/// ProjectInfoExtension 의 기본값을 설정한다.
/// @param project Gradle Project
fun ProjectInfoExtension.applyDefaults(project: Project) {
    (this as SourceTemplateExtension).applyDefaults(project)
    (this as SingleFileExtension).applyDefaults(project)
    templateFile.convention(
        project.layout.projectDirectory.dir("src/main/javaTemplate")
            .file("ProjectInfo.java.tmpl").asFile)
}

//
// BuildInfoTask
//

/// BuildInfoTask 의 기본값을 설정한다.
/// @param project Gradle Project
fun BuildInfoTask.applyDefaults(project: Project) {
    val config = project.objects.newInstance(BuildInfoExtension::class.java)
    config.applyDefaults(project)
    (this as TemplateProperties).configureFrom(config as TemplateExtension)
    (this as SingleFileProperties).configureFrom(config as SingleFileExtension)
    setupDerivedProperties(project)
}

/// BuildInfoExtension 의 기본값을 설정한다.
/// @param project Gradle Project
fun BuildInfoExtension.applyDefaults(project: Project) {
    (this as TemplateExtension).applyDefaults(project)
    (this as SingleFileExtension).applyDefaults(project)
    templateFile.convention(
        project.layout.projectDirectory.dir("src/main/templates")
            .file("build-info.txt.tmpl").asFile)
}

//
// 추상 클래스별 기본값 설정
//

/// 추상 클래스 TemplateExtension 의 기본값을 설정한다.
/// @param project Gradle Project
fun TemplateExtension.applyDefaults(project: Project) {
    outputDir.convention(project.layout.buildDirectory.dir("."))
    templateLanguage.convention(SupportedTemplateLanguage.SIMPLE)
    templateProcessorConfig.convention(
        templateLanguage.map { lang -> lang.defaultConfig() })
    templateFileSuffix.convention(
        templateLanguage.map { lang -> lang.defaultSuffix() })

    templateLanguage.convention(SupportedTemplateLanguage.SIMPLE)
    charset.convention(TemplateProperties.DEFAULT_CHARSET)
    model.convention(emptyMap())
}

/// 추상 클래스 SourceTemplateExtension 의 기본값을 설정한다.
/// @param project Gradle Project
fun SourceTemplateExtension.applyDefaults(project: Project) {
    (this as TemplateExtension).applyDefaults(project)
    outputDir.convention(project.layout
        .buildDirectory.dir(SourceTemplateProperties.DEFAULT_OUTPUT_DIR))

    headerText.convention("""
            **IMPORTANT: Do not edit this file manually!**
            This file is generated automatically by the `${'$'}{templates.task.name}` Gradle task.
            - Template file: ${'$'}{templates.filename}
        """.trimIndent().trimEnd('\r', '\n'))
    footerText.convention("Generated on: ${'$'}{templates.generate.localtime:yyyy-MM-dd'T'HH:mm:ssZ VV}")

    javaVersion.convention(Runtime.version().feature())
    project.plugins.withType(JavaPlugin::class.java) {
        // If Java plugin is applied, use the toolchain language version
        javaVersion.convention(
            project.the<JavaPluginExtension>()
                .toolchain.languageVersion.map { it.asInt() }
                .getOrElse(Runtime.version().feature())
            // Fallback to the runtime java version, if toolchain is not configured
        )
    }
    projectName.convention(project.name)
    projectGroup.convention(project.group.toString())
    projectVersion.convention(project.version.toString())
}

/// 추상 클래스 MultipleFilesExtension 의 기본값을 설정한다.
/// @param project Gradle Project
fun MultipleFilesExtension.applyDefaults(project: Project) {
    templateLanguage.convention(SupportedTemplateLanguage.SIMPLE)
    templateProcessorConfig.convention(
        templateLanguage.map { lang -> lang.defaultConfig() })
    templateFileSuffix.convention(
        templateLanguage.map { lang -> lang.defaultSuffix() })

    templateDir.convention(
        project.layout.projectDirectory.dir("src/main/templates"))
    val templateFilesProvider = project.provider {
        val suffix = templateFileSuffix.get()
        val dir = templateDir.get()
        project.fileTree(dir).matching {
            include("**/*.$suffix")
        }
    }
    templateFiles.from(templateFilesProvider)
}

/// 추상 클래스 SingleFileExtension 의 기본값을 설정한다.
/// @param project Gradle Project
fun SingleFileExtension.applyDefaults(project: Project) {
    // do nothing. templateFile should be set explicitly
}

//
// 태스크의 프로퍼티 기본값 의존성 설정 (태스크에 값을 직접 설정하는 경우용)
// 프로퍼티간의 의존성이 있는 경우,
// 최종 태스크 클래스에서 모든 의존성 체인을 설정해야 문제를 방지할 수 있음
//

internal fun <T> T.setupDerivedProperties(project: Project) where T : MultipleFilesProperties {
    templateProcessorConfig.convention(
        templateLanguage.map { lang -> lang.defaultConfig() })
    templateFileSuffix.convention(
        templateLanguage.map { lang -> lang.defaultSuffix() })
    val templateFilesProvider = project.provider {
        val suffix = templateFileSuffix.get()
        val dir = templateDir.get()
        project.fileTree(dir).matching {
            include("**/*.$suffix")
        }
    }
    templateFiles.from(templateFilesProvider)
}

internal fun <T> T.setupDerivedProperties(project: Project) where T : SingleFileProperties {
    templateProcessorConfig.convention(
        templateLanguage.map { lang -> lang.defaultConfig() })
    templateFileSuffix.convention(
        templateLanguage.map { lang -> lang.defaultSuffix() })
}
